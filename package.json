{
  "name": "write-assist-ai",
  "displayName": "Write Assist AI",
  "description": "Fully customizable AI-powered Text Rewriter/Paraphraser for VS Code. Boost your writing productivity and creativity with AI-powered rewrites! This extension seamlessly integrates with VS Code, allowing you to rewrite text in Markdown, LaTeX, and plain text files using the latest OpenAI models.",
  "version": "0.7.0",
  "publisher": "ra-jeev",
  "repository": {
    "url": "https://github.com/ra-jeev/write-assist-ai"
  },
  "bugs": {
    "url": "https://github.com/ra-jeev/write-assist-ai/issues"
  },
  "sponsor": {
    "url": "https://github.com/sponsors/ra-jeev"
  },
  "engines": {
    "vscode": "^1.102.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "writing",
    "assistant",
    "markdown",
    "openai",
    "latex",
    "text",
    "quarto",
    "chatgpt",
    "rewrite",
    "mdx"
  ],
  "icon": "assets/images/icon.png",
  "galleryBanner": {
    "theme": "light",
    "color": "#ffc600"
  },
  "activationEvents": [
    "onLanguage:markdown",
    "onLanguage:mdx",
    "onLanguage:markdown_latex_combined",
    "onLanguage:markdown-math",
    "onLanguage:plaintext",
    "onLanguage:latex",
    "onLanguage:tex",
    "onLanguage:bibtex",
    "onLanguage:quarto"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "writeAssistAi.openAiApiKey",
        "title": "Set the OpenAI Api Key",
        "shortTitle": "OpenAI Api Key",
        "category": "Write Assist AI"
      },
      {
        "command": "writeAssistAi.createSystemPromptFile",
        "title": "Generate System Prompt File",
        "category": "Write Assist AI"
      },
      {
        "command": "writeAssistAi.createQuickFixesFile",
        "title": "Generate Quick Fixes File",
        "category": "Write Assist AI"
      },
      {
        "command": "writeAssistAi.createRewriteOptionsFile",
        "title": "Generate Rewrite Options File",
        "category": "Write Assist AI"
      }
    ],
    "configuration": {
      "title": "Write Assist AI",
      "properties": {
        "writeAssistAi.maxTokens": {
          "type": "integer",
          "default": 4096,
          "order": 0,
          "description": "Sets the maximum number of tokens for each API call."
        },
        "writeAssistAi.temperature": {
          "type": "number",
          "default": 0.3,
          "minimum": 0,
          "maximum": 2,
          "order": 1,
          "description": "Controls the temperature (0–2) for API calls. Lower values make output more focused and deterministic; higher values make it more random and creative. This setting is ignored by newer models such as o3, o4, and GPT-5."
        },
        "writeAssistAi.openAi.model": {
          "type": "string",
          "enum": [
            "gpt-5",
            "gpt-5-mini",
            "gpt-5-nano",
            "gpt-4.1",
            "gpt-4.1-mini",
            "gpt-4.1-nano",
            "gpt-4o",
            "gpt-4o-mini",
            "o3",
            "o3-mini",
            "o4-mini",
            "custom"
          ],
          "default": "gpt-5",
          "order": 2,
          "description": "Select the default OpenAI model to use for rewrites."
        },
        "writeAssistAi.openAi.customModel": {
          "type": "string",
          "order": 3,
          "markdownDescription": "The custom OpenAI model to use when `#writeAssistAi.openAi.model#` is set to `custom`.\n\nWhen using a `#writeAssistAi.openAi.proxyUrl#` you must set a custom model."
        },
        "writeAssistAi.openAi.proxyUrl": {
          "type": "string",
          "order": 4,
          "markdownDescription": "The proxy server URL to use for API calls.\n\nEnter a fully qualified URL including the port, for example: `http://localhost:11434/v1` for Ollama. You must also set the custom model to use when setting this."
        },
        "writeAssistAi.openAi.reasoningEffort": {
          "type": "string",
          "enum": [
            "auto",
            "minimal",
            "low",
            "medium",
            "high"
          ],
          "default": "auto",
          "order": 5,
          "markdownDescription": "Controls the amount of reasoning the model does before generating a response. Higher values may lead to more thoughtful responses but can increase latency and cost. This setting is primarily for reasoning models like `o1`, `gpt-5` etc."
        },
        "writeAssistAi.systemPrompt": {
          "type": "string",
          "default": "You are a helpful assistant. Your job is to perform the tasks related to rewriting text inputs given by the user. If the input text contains any special syntax then strictly follow that syntax, e.g. for markdown return markdown, for latex return latex etc. Do not return markdown for latex, and vice versa. You must return only the modified output. Do not explain, greet, apologize, or add any commentary. Do not say things like ‘here is the revised text’. Simply return the text as if you're a function returning a value.",
          "order": 6,
          "scope": "language-overridable",
          "editPresentation": "multilineText",
          "markdownDescription": "Sets the base system prompt for API calls. Any action-specific prompt will be added to this system prompt.\n\n**Language-specific config:** You can set different system prompts for different languages. In the VS Code settings UI, type `@lang:<languageId> Write Assist AI` (e.g. `@lang:markdown Write Assist AI`) and set the System Prompt for that language.\n\n**Note:** You can also set this per project using a `systemPrompt.md` file inside a `.write-assist-ai/` folder at your workspace root. File-based config overrides this setting, but does not support language-specific overrides (see README for details)."
        },
        "writeAssistAi.useAcceptRejectFlow": {
          "type": "boolean",
          "default": true,
          "order": 7,
          "markdownDescription": "If enabled, the original and rewritten text are shown together with options to accept or reject the rewrite.\n\nIf disabled, the rewritten text is inserted automatically into the editor, enclosed within the configured `#writeAssistAi.separatorText#`."
        },
        "writeAssistAi.separatorText": {
          "type": "string",
          "default": "********************************",
          "order": 8,
          "markdownDescription": "The text used to separate the rewritten output in the editor. Leave empty for no separator."
        },
        "writeAssistAi.quickFixes": {
          "type": "array",
          "items": {
            "type": "object",
            "examples": [
              {
                "title": "<command name/short title>",
                "description": "<command description>",
                "prompt": "<LLM prompt for the given command>"
              }
            ],
            "properties": {
              "title": {
                "type": "string",
                "default": "",
                "description": "The command title shown in the editor tooltip menu."
              },
              "description": {
                "type": "string",
                "default": "",
                "description": "A short description of the command."
              },
              "prompt": {
                "type": "string",
                "default": "",
                "description": "The LLM prompt to use for this command."
              }
            },
            "additionalProperties": false,
            "required": [
              "title",
              "description",
              "prompt"
            ]
          },
          "default": [
            {
              "title": "Rephrase the selected text",
              "description": "Rephrases the selected text.",
              "prompt": "Rephrase the given text and make the sentences more clear and readable."
            },
            {
              "title": "Suggest headlines for selection",
              "description": "Suggests appropriate headlines for the selected text.",
              "prompt": "Suggest 2–3 short headlines based on the given text."
            },
            {
              "title": "Summarize the selected text",
              "description": "Writes a summary of the selected text.",
              "prompt": "Write a short summary for the given text."
            },
            {
              "title": "Expand the selected text",
              "description": "Expands on the selected text, making it more detailed.",
              "prompt": "Continue building on the given text, make it better and verbose."
            },
            {
              "title": "Shorten the selected text",
              "description": "Makes the selected text more concise.",
              "prompt": "Try to make the given text concise while keeping its essence."
            }
          ],
          "scope": "language-overridable",
          "markdownDescription": "Commands that appear in the **Quick Fix** section of the editor tooltip when text is selected.\n\n**Language-specific config:** To configure actions per language, place them under that language’s config block (e.g. for markdown, put `\"writeAssistAi.quickFixes\"` under the `[markdown]` block).\n\n**Example config:**\n```json\n[\n  {\n    \"title\": \"<command name/short title>\",\n    \"description\": \"<command description>\",\n    \"prompt\": \"<LLM prompt for the given command>\"\n  }\n]\n```\n\n**Note:** You can also set this per project using a `quickFixes.json` file inside a `.write-assist-ai/` folder at your workspace root. File-based config overrides this setting, but does not support language-specific overrides (see README for details)."
        },
        "writeAssistAi.rewriteOptions": {
          "type": "array",
          "items": {
            "type": "object",
            "examples": [
              {
                "title": "<command name/short title>",
                "description": "<command description>",
                "prompt": "<LLM prompt for the given command>"
              }
            ],
            "properties": {
              "title": {
                "type": "string",
                "default": "",
                "description": "The command title shown in the editor tooltip menu."
              },
              "description": {
                "type": "string",
                "default": "",
                "description": "A short description of the command."
              },
              "prompt": {
                "type": "string",
                "default": "",
                "description": "The LLM prompt to use for this command."
              }
            },
            "additionalProperties": false,
            "required": [
              "title",
              "description",
              "prompt"
            ]
          },
          "default": [
            {
              "title": "Change to professional tone",
              "description": "Rewrites the selected text in a professional tone.",
              "prompt": "Make the given text better and rewrite it in a professional tone."
            },
            {
              "title": "Change to casual tone",
              "description": "Rewrites the selected text in a casual tone.",
              "prompt": "Make the given text better and rewrite it in a casual tone."
            },
            {
              "title": "Change to formal tone",
              "description": "Rewrites the selected text in a formal tone.",
              "prompt": "Make the given text better and rewrite it in a formal tone."
            },
            {
              "title": "Change to friendly tone",
              "description": "Rewrites the selected text in a friendly tone.",
              "prompt": "Make the given text better and rewrite it in a friendly tone."
            },
            {
              "title": "Change to informative tone",
              "description": "Rewrites the selected text in an informative tone.",
              "prompt": "Make the given text better and rewrite it in an informative tone."
            },
            {
              "title": "Change to authoritative tone",
              "description": "Rewrites the selected text in an authoritative tone.",
              "prompt": "Make the given text better and rewrite it in an authoritative tone."
            }
          ],
          "scope": "language-overridable",
          "markdownDescription": "Commands that appear in the **Rewrite** section of the editor tooltip when text is selected.\n\n**Language-specific config:** To configure actions per language, place them under that language’s config block (e.g. for markdown, put `\"writeAssistAi.rewriteOptions\"` under the `[markdown]` block).\n\n**Example config:**\n```json\n[\n  {\n    \"title\": \"<command name/short title>\",\n    \"description\": \"<command description>\",\n    \"prompt\": \"<LLM prompt for the given command>\"\n  }\n]\n```\n\n**Note:** You can also set this per project using a `rewriteOptions.json` file inside a `.write-assist-ai/` folder at your workspace root. File-based config overrides this setting, but does not support language-specific overrides (see README for details)."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.102.0",
    "@typescript-eslint/eslint-plugin": "^8.41.0",
    "@typescript-eslint/parser": "^8.41.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "esbuild": "^0.25.9",
    "eslint": "^9.34.0",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.9.2"
  },
  "dependencies": {
    "openai": "^5.16.0"
  }
}